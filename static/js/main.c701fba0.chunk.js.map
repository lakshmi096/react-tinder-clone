{"version":3,"sources":["components/Header/index.js","firebase.js","components/TinderCards/index.js","components/SwipeButtons/index.js","components/Chats/Chat.js","components/Chats/index.js","components/Chats/InputBox.js","components/Chats/ChatScreen.js","App.js","serviceWorker.js","index.js"],"names":["Header","backButton","history","useHistory","className","IconButton","onClick","replace","fontSize","to","src","alt","database","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","TinderCards","useState","name","url","people","setPeople","useEffect","unsubscribe","collection","onSnapshot","snapshot","docs","map","doc","data","peopleList","person","key","preventSwipe","style","backgroundImage","SwipeButtons","Chat","message","timestamp","profilePic","Avatar","Chats","InputBox","type","placeholder","ChatScreen","image","messages","messageList","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.c701fba0.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Header.css\";\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport ForumIcon from '@material-ui/icons/Forum';\r\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\nconst Header = ({backButton}) => {\r\n    const history = useHistory();\r\n    return ( \r\n        //BEM\r\n        <div className=\"header\">\r\n            {backButton ? (\r\n                <IconButton onClick = {() => history.replace(backButton)}>               \r\n                    <ArrowBackIosIcon className=\"header__icon\" fontSize=\"large\"/>\r\n                </IconButton>\r\n            ) : (\r\n                <IconButton>               \r\n                    <PersonIcon className=\"header__icon\" fontSize=\"large\"/>\r\n                </IconButton>\r\n            )}\r\n            \r\n            <Link to=\"/\">\r\n                <img \r\n                    className = \"header__logo\"\r\n                    src=\"https://1000logos.net/wp-content/uploads/2018/07/tinder-logo-500x281.png\"\r\n                    alt=\"tinder logo\"\r\n                />\r\n            </Link>\r\n            <Link to=\"/chat\">\r\n                <IconButton>\r\n                    <ForumIcon className=\"header__icon\" fontSize=\"large\"/>\r\n                </IconButton>\r\n            </Link>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Header;","\r\nimport firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBVMPzq1XakU8eiHreFx1VPn6uykRMecdo\",\r\n    authDomain: \"tinder-clone-ddc8f.firebaseapp.com\",\r\n    databaseURL: \"https://tinder-clone-ddc8f.firebaseio.com\",\r\n    projectId: \"tinder-clone-ddc8f\",\r\n    storageBucket: \"tinder-clone-ddc8f.appspot.com\",\r\n    messagingSenderId: \"1021557451642\",\r\n    appId: \"1:1021557451642:web:4d79c159bc3500e93504c3\",\r\n    measurementId: \"G-555DV305PF\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst database = firebaseApp.firestore();\r\n\r\nexport default database;","import React,{useState, useEffect} from 'react';\r\nimport TinderCard from \"react-tinder-card\";\r\nimport \"./TinderCards.css\";\r\nimport database from '../../firebase';\r\n\r\nconst TinderCards = () => {\r\n    const [people, setPeople] = useState([\r\n        {\r\n            name: \"Steve Jobs\",\r\n            url: \"https://papers.co/wallpaper/papers.co-ha87-wallpaper-steve-jobs-face-apple-36-3840x2400-4k-wallpaper.jpg\"\r\n        },\r\n        {\r\n            name: \"Zuckerberg\",\r\n            url: \"https://wallpapercave.com/wp/wp2126272.jpg\"\r\n        }\r\n    ]);\r\n\r\n    useEffect(() => {\r\n       const unsubscribe = database\r\n        .collection(\"people\")\r\n        .onSnapshot((snapshot) =>\r\n            setPeople(snapshot.docs.map((doc) => doc.data()))\r\n        )\r\n        return () => {\r\n            unsubscribe();\r\n        };\r\n    }, [people]);\r\n\r\n    const peopleList = people.map(person => {\r\n        return(\r\n            <TinderCard \r\n                className=\"swipe\" \r\n                key={person.name}\r\n                preventSwipe ={['up', 'down']}\r\n            >\r\n                <div\r\n                    style={{ backgroundImage: `url(${person.url})` }} \r\n                    className=\"card\">\r\n                    <h3>{person.name}</h3>\r\n                </div>\r\n            </TinderCard>\r\n        )\r\n    })\r\n    return ( \r\n        <div>\r\n            <div className=\"tinderCards__cardContainer\">\r\n                {peopleList}\r\n            </div>\r\n            {/* <h1>TinderCards</h1>  */}\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default TinderCards;","import React, { useState } from 'react';\r\nimport \"./SwipeButtons.css\";\r\nimport ReplayIcon from \"@material-ui/icons/Replay\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport StarRateIcon from \"@material-ui/icons/StarRate\";\r\nimport FavouriteIcon from \"@material-ui/icons/Favorite\";\r\nimport FlashOnIcon from \"@material-ui/icons/FlashOn\";\r\nimport { IconButton } from '@material-ui/core';\r\n\r\nconst SwipeButtons = () => {\r\n    return ( \r\n        <div className=\"swipeButtons\">\r\n            <IconButton className=\"swipeButtons__replay\">  \r\n                <ReplayIcon fontSize=\"large\"/>\r\n            </IconButton>  \r\n            <IconButton className=\"swipeButtons__left\">\r\n                <CloseIcon fontSize=\"large\"/>\r\n            </IconButton>\r\n            <IconButton className=\"swipeButtons__star\">\r\n                <StarRateIcon fontSize=\"large\"/>                \r\n            </IconButton>\r\n            <IconButton className=\"swipeButtons__right\">\r\n                <FavouriteIcon fontSize=\"large\"/>                \r\n            </IconButton>\r\n            <IconButton className=\"swipeButtons__lightning\">\r\n                <FlashOnIcon fontSize=\"large\"/>\r\n            </IconButton>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default SwipeButtons;","import React from 'react';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport './Chat.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Chat = ({name, message, timestamp, profilePic}) => {\r\n    return ( \r\n        <Link to={`/chat/${name}`}>\r\n            <div className=\"chat\">\r\n                <Avatar className=\"chat__image\" alt={name} src={profilePic}/>\r\n                <div className=\"chat__details\">\r\n                    <h2>{name}</h2>\r\n                    <p>{message}</p>\r\n                </div>\r\n                <p className=\"chat__timestamp\">{timestamp}</p>\r\n            </div>\r\n        </Link>\r\n     );\r\n}\r\n \r\nexport default Chat;","import React from 'react';\r\nimport \"./Chats.css\";\r\nimport Chat from './Chat';\r\n\r\nconst Chats = () => {\r\n    return ( \r\n        <div className=\"chats\">\r\n            <Chat\r\n                name=\"Johny\"\r\n                message=\"Hi\"\r\n                timestamp=\"40 sec ago\"\r\n                profilePic=\"https://wallpapercave.com/wp/wp2126272.jg\"\r\n            />\r\n            <Chat\r\n                name=\"Rachel\"\r\n                message=\"Hello\"\r\n                timestamp=\"20 sec ago\"\r\n                profilePic=\"https://wallpapercave.com/wp/wp2126272.jpg\"\r\n            />\r\n            <Chat\r\n                name=\"Abraham\"\r\n                message=\"Hi\"\r\n                timestamp=\"50 sec ago\"\r\n                profilePic=\"https://wallpapercave.com/wp/wp2126272.jpg\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Chats;","import React from 'react';\r\nimport \"./InputBox.css\"\r\n\r\nconst InputBox = () => {\r\n    return ( \r\n        <form className=\"inputBox\">\r\n            <input \r\n                className=\"inputBox__text\"\r\n                type=\"text\"\r\n                placeholder=\"Type a message...\" />\r\n            <button className=\"inputBox__button\">SEND</button>\r\n        </form>\r\n     );\r\n}\r\n \r\nexport default InputBox;","import React,{useState} from 'react';\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport \"./ChatScreen.css\";\r\nimport InputBox from './InputBox';\r\n\r\nconst ChatScreen = () => {\r\n    const [messages, setMessages] = useState([\r\n        {\r\n            name: \"Rachel\",\r\n            image: \"https://wallpapercave.com/wp/wp2126272.jpg\",\r\n            message: \"Hey!! wassup?\"\r\n        },\r\n        {\r\n            name: \"Rachel\",\r\n            image: \"https://wallpapercave.com/wp/wp2126272.jpg\",\r\n            message: \"Wanna catch up?\"\r\n        },\r\n        {\r\n            message: \"Sure!! Anytime\"\r\n        }\r\n    ]);\r\n\r\n    const messageList = messages.map(message => {\r\n        return message.name ? (\r\n            <div className=\"chatScreen_message\">\r\n                <Avatar className=\"chat__image\" alt={message.name} src={message.image}/>\r\n                <p className=\"chatScreen__text\">{message.message}</p>\r\n            </div>\r\n        ) : (\r\n            <div className=\"chatScreen_message\">\r\n                <p className=\"chatScreen__myText\">{message.message}</p>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return ( \r\n        <div className=\"chatScreen\">\r\n            <p className=\"chatScreen__matched\">YOU MATCHED WITH RACHEL ON 10/03/20</p>\r\n            {messageList}\r\n            <InputBox/>\r\n        </div> \r\n    );\r\n}\r\n \r\nexport default ChatScreen;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header/';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport TinderCards from './components/TinderCards/';\nimport SwipeButtons from './components/SwipeButtons/';\nimport Chats from './components/Chats/'\nimport ChatScreen from './components/Chats/ChatScreen';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/chat/:person\">\n            <Header backButton=\"/chat\" />\n            <ChatScreen/>\n          </Route>\n          <Route path=\"/chat\">\n            <Header backButton=\"/\" />\n            <Chats/>\n          </Route>\n          <Route path=\"/\">\n            <Header/>\n            <TinderCards/>\n            <SwipeButtons/>\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}